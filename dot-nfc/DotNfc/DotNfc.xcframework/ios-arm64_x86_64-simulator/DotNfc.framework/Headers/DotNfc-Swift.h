#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef DOTNFC_SWIFT_H
#define DOTNFC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import DotCore;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DotNfc",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// Access Control protocol.
/// The prurpose of Access Control protocol is to establish connection between the device and the NFC chip of the travel document.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNAccessControlProtocol, "AccessControlProtocol", open) {
/// Basic Access Control
  DOTNAccessControlProtocolBac = 0,
/// Password Authenticated Connection Establishment
  DOTNAccessControlProtocolPace = 1,
};

@class NSString;

/// Access Control protocol wrapper.
SWIFT_CLASS_NAMED("AccessControlProtocolWrapper") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNAccessControlProtocolWrapper : NSObject
@property (nonatomic, readonly) enum DOTNAccessControlProtocol accessControlProtocol;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAccessControlProtocol:(enum DOTNAccessControlProtocol)accessControlProtocol OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Contents of DG12 - Additional document details.
SWIFT_CLASS_NAMED("AdditionalDocumentDetails") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNAdditionalDocumentDetails : NSObject
/// Issuing Authority.
@property (nonatomic, readonly, copy) NSString * _Nullable issuingAuthority;
/// Full date of issue.
@property (nonatomic, readonly, copy) NSString * _Nullable dateOfIssue;
/// Endorsements or observations.
@property (nonatomic, readonly, copy) NSString * _Nullable endorsementsOrObservations;
/// Tax or exit requirements.
@property (nonatomic, readonly, copy) NSString * _Nullable taxOrExitRequirements;
/// Date and time of document personalization.
@property (nonatomic, readonly, copy) NSString * _Nullable personalizationTime;
/// Serial number of personalization device.
@property (nonatomic, readonly, copy) NSString * _Nullable personalizationDeviceSerialNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithIssuingAuthority:(NSString * _Nullable)issuingAuthority dateOfIssue:(NSString * _Nullable)dateOfIssue endorsementsOrObservations:(NSString * _Nullable)endorsementsOrObservations taxOrExitRequirements:(NSString * _Nullable)taxOrExitRequirements personalizationTime:(NSString * _Nullable)personalizationTime personalizationDeviceSerialNumber:(NSString * _Nullable)personalizationDeviceSerialNumber OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@class DOTNNameOfHolder;

/// Contents of DG11 - Additional personal details.
SWIFT_CLASS_NAMED("AdditionalPersonalDetails") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNAdditionalPersonalDetails : NSObject
/// Full name of document holder.
@property (nonatomic, readonly, strong) DOTNNameOfHolder * _Nullable nameOfHolder;
/// Other names.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable otherNames;
/// Personal number.
@property (nonatomic, readonly, copy) NSString * _Nullable personalNumber;
/// Full date of birth.
@property (nonatomic, readonly, copy) NSString * _Nullable fullDateOfBirth;
/// Place of birth.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable placeOfBirth;
/// Permanent address.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable address;
/// Telephone
@property (nonatomic, readonly, copy) NSString * _Nullable telephone;
/// Profession.
@property (nonatomic, readonly, copy) NSString * _Nullable profession;
/// Title.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Personal summary.
@property (nonatomic, readonly, copy) NSString * _Nullable personalSummary;
/// Other valid travel document numbers.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable otherValidTravelDocumentNumbers;
/// Custody information.
@property (nonatomic, readonly, copy) NSString * _Nullable custodyInformation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithNameOfHolder:(DOTNNameOfHolder * _Nullable)nameOfHolder otherNames:(NSArray<NSString *> * _Nullable)otherNames personalNumber:(NSString * _Nullable)personalNumber fullDateOfBirth:(NSString * _Nullable)fullDateOfBirth placeOfBirth:(NSArray<NSString *> * _Nullable)placeOfBirth address:(NSArray<NSString *> * _Nullable)address telephone:(NSString * _Nullable)telephone profession:(NSString * _Nullable)profession title:(NSString * _Nullable)title personalSummary:(NSString * _Nullable)personalSummary otherValidTravelDocumentNumbers:(NSArray<NSString *> * _Nullable)otherValidTravelDocumentNumbers custodyInformation:(NSString * _Nullable)custodyInformation OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@class DOTNDataAuthenticationStatus;
@class DOTNChipAuthenticationStatus;

/// Authentication status of data and chip.
SWIFT_CLASS_NAMED("AuthenticationStatus") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNAuthenticationStatus : NSObject
/// Data authentication status (using Passing Authentication protocol).
@property (nonatomic, readonly, strong) DOTNDataAuthenticationStatus * _Nonnull data;
/// Chip authentication status (using either PACE - Chip Authentication Mapping, Chip Authentication or Active Authentication protocol).
@property (nonatomic, readonly, strong) DOTNChipAuthenticationStatus * _Nonnull chip;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(DOTNDataAuthenticationStatus * _Nonnull)data chip:(DOTNChipAuthenticationStatus * _Nonnull)chip OBJC_DESIGNATED_INITIALIZER;
@end

enum DOTNChipAuthenticationStatusStatus : NSInteger;
@class DOTNChipAuthenticationStatusWrappedProtocol;
@class NSData;

/// Authentication status of the chip and protocol used for that purpose.
SWIFT_CLASS_NAMED("ChipAuthenticationStatus") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNChipAuthenticationStatus : NSObject
/// Status of the authentication process.
@property (nonatomic, readonly) enum DOTNChipAuthenticationStatusStatus status;
/// Protocol used for that purpose.
@property (nonatomic, readonly, strong) DOTNChipAuthenticationStatusWrappedProtocol * _Nullable authenticationProtocol;
/// The Active Authentication response (signature) is set only if explicit challenge <code>activeAuthenticationChallenge</code> in <code>NfcTravelDocumentReader.read</code> operation was set by the caller and Active Authentication protocol is supported by the chip. Otherwise <code>activeAuthenticationResponse</code> is nil.
@property (nonatomic, readonly, copy) NSData * _Nullable activeAuthenticationResponse;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStatus:(enum DOTNChipAuthenticationStatusStatus)status wrappedProtocol:(DOTNChipAuthenticationStatusWrappedProtocol * _Nullable)wrappedProtocol activeAuthenticationResponse:(NSData * _Nullable)activeAuthenticationResponse;
@end

/// Authentication status of the chip.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNChipAuthenticationStatusStatus, "Status", open) {
/// Chip is proved genuine.
  DOTNChipAuthenticationStatusStatusAuthenticated = 0,
/// Chip is proved not genuine.
  DOTNChipAuthenticationStatusStatusDenied = 1,
/// No such protocol supported by the chip.
  DOTNChipAuthenticationStatusStatusNotSupported = 2,
};

enum DOTNChipAuthenticationStatusProtocol : NSInteger;

/// Objective-C wrapper of <code>AuthenticationProtocol</code>.
SWIFT_CLASS_NAMED("WrappedProtocol")
@interface DOTNChipAuthenticationStatusWrappedProtocol : NSObject
@property (nonatomic, readonly) enum DOTNChipAuthenticationStatusProtocol authenticationProtocol;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAuthenticationProtocol:(enum DOTNChipAuthenticationStatusProtocol)authenticationProtocol OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

/// Protocol for authentication of the chip.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNChipAuthenticationStatusProtocol, "AuthenticationProtocol", open) {
/// PACE access protocol with Chip Authentication Mapping. This protocol has top priority.
  DOTNChipAuthenticationStatusProtocolPaceChipAuthenticationMapping = 0,
/// Chip Authentication protocol. Used if PACE-CAM is not supported.
  DOTNChipAuthenticationStatusProtocolChipAuthentication = 1,
/// Active Authentication protocol. Used if neither PACE-CAM nor Chip Authentication protocol is supported.
  DOTNChipAuthenticationStatusProtocolActiveAuthentication = 2,
};

enum DOTNDataAuthenticationStatusStatus : NSInteger;
enum DOTNDataAuthenticationStatusProtocol : NSInteger;

/// Authentication status of the data and protocol used for that purpose.
SWIFT_CLASS_NAMED("DataAuthenticationStatus") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNDataAuthenticationStatus : NSObject
/// Status of the authentication process.
@property (nonatomic, readonly) enum DOTNDataAuthenticationStatusStatus status;
/// Protocol used for that purpose.
@property (nonatomic, readonly) enum DOTNDataAuthenticationStatusProtocol authenticationProtocol;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStatus:(enum DOTNDataAuthenticationStatusStatus)status authenticationProtocol:(enum DOTNDataAuthenticationStatusProtocol)authenticationProtocol OBJC_DESIGNATED_INITIALIZER;
@end

/// Authentication status of the data.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNDataAuthenticationStatusStatus, "Status", open) {
/// Data is proved genuine.
  DOTNDataAuthenticationStatusStatusAuthenticated = 0,
/// Data is proved not genuine.
  DOTNDataAuthenticationStatusStatusDenied = 1,
/// Unable to evaluate. No authority certificates provided.
  DOTNDataAuthenticationStatusStatusAuthorityCertificatesNotProvided = 2,
};

/// Protocol for authentication of the data.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNDataAuthenticationStatusProtocol, "AuthenticationProtocol", open) {
/// Passive Authentication protocol.
  DOTNDataAuthenticationStatusProtocolPassiveAuthentication = 0,
};


SWIFT_CLASS_NAMED("DebugEvent")
@interface DOTNDebugEvent : NSObject
@property (nonatomic, readonly) NSInteger timestamp;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

@class DOTNNfcKey;
@class DOTNLdsMasterFile;

SWIFT_CLASS_NAMED("DebugInfo") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNDebugInfo : NSObject
@property (nonatomic, readonly, strong) DOTNNfcKey * _Nullable nfcKey;
@property (nonatomic, readonly, copy) NSData * _Nullable activeAuthenticationChallenge;
@property (nonatomic, readonly, strong) DOTNAccessControlProtocolWrapper * _Nullable accessControlProtocol;
@property (nonatomic, readonly, strong) DOTNChipAuthenticationStatus * _Nullable chipAuthenticationStatus;
@property (nonatomic, readonly, strong) DOTNLdsMasterFile * _Nullable ldsMasterFile;
@property (nonatomic, readonly, strong) DOTNDataAuthenticationStatus * _Nullable dataAuthenticationStatus;
@property (nonatomic, readonly, copy) NSArray<DOTNDebugEvent *> * _Nonnull events;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

@class DOTNImage;

/// Contents of DG7 - Displayed signature or usual mark.
SWIFT_CLASS_NAMED("DisplayedSignatureOrUsualMark") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNDisplayedSignatureOrUsualMark : NSObject
/// Image of a signature of document holder.
@property (nonatomic, readonly, strong) DOTNImage * _Nullable displayedSignatureOrUsualMarkImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDisplayedSignatureOrUsualMarkImage:(DOTNImage * _Nullable)displayedSignatureOrUsualMarkImage OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@protocol DotSdkLicenseProxyProtocol;

/// Class responsible for the <code>DotNfc</code> library initialization.
SWIFT_CLASS("_TtC6DotNfc13DotNfcLibrary") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DotNfcLibrary : NSObject <DotLibrary>
/// The library identifier.
@property (nonatomic, readonly) enum DotLibraryId id;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize library with license.
/// \param license <code>DotSdk</code> license.
///
- (BOOL)initializeWithLicense:(id <DotSdkLicenseProxyProtocol> _Nonnull)license error:(NSError * _Nullable * _Nullable)error;
/// Deinitialize library.
- (BOOL)deinitializeAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Verify that library is initialized.
- (BOOL)verifyIsActiveAndReturnError:(NSError * _Nullable * _Nullable)error;
@end


/// Contents of DG2 - Face image.
SWIFT_CLASS_NAMED("EncodedIdentificationFeaturesFace") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNEncodedIdentificationFeaturesFace : NSObject
/// Face image of document holder.
@property (nonatomic, readonly, strong) DOTNImage * _Nullable faceImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFaceImage:(DOTNImage * _Nullable)faceImage OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end



/// This class can parse input data as a flat tag structure which can be present in Data Groups. For example, this class should be able to parse <code>OptionalDetails.content</code> of some documents.
SWIFT_CLASS("_TtC6DotNfc22FlatTagStructureParser") SWIFT_AVAILABILITY(ios,introduced=13)
@interface FlatTagStructureParser : NSObject
/// Parse flat tag structure and return (tag, value) pairs as a dictionary.
/// \param value Input data.
///
///
/// throws:
/// Invalid input structure error.
///
/// returns:
/// Dictionary as a result.
- (NSDictionary<NSNumber *, NSData *> * _Nullable)parseWithValue:(NSData * _Nonnull)value error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DOTNImageFormat : NSInteger;
@class DOTImageSize;

/// Raw image data representation.
SWIFT_CLASS_NAMED("Image") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNImage : NSObject
/// Image data.
@property (nonatomic, readonly, copy) NSData * _Nonnull bytes;
/// Image format.
@property (nonatomic, readonly) enum DOTNImageFormat format;
/// Image size.
@property (nonatomic, readonly, strong) DOTImageSize * _Nonnull size;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithBytes:(NSData * _Nonnull)bytes format:(enum DOTNImageFormat)format size:(DOTImageSize * _Nonnull)size OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// Supported image formats.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNImageFormat, "ImageFormat", open) {
/// JPEG
  DOTNImageFormatJpeg = 0,
/// JPEG2000
  DOTNImageFormatJpeg2000 = 1,
};

enum DOTNLds1ElementaryFileId : NSInteger;

/// Raw representation of a single file in Logical Data Structure version 1 stored in the NFC chip of the travel document.
SWIFT_CLASS_NAMED("Lds1ElementaryFile") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNLds1ElementaryFile : NSObject
/// File identifier.
@property (nonatomic, readonly) enum DOTNLds1ElementaryFileId id;
/// File data.
@property (nonatomic, readonly, copy) NSData * _Nullable bytes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithId:(enum DOTNLds1ElementaryFileId)id bytes:(NSData * _Nullable)bytes OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Identifier of the LDS1 Elementary File.
/// More details about Elementary Files can be found in <a href="https://www.icao.int/publications/pages/publication.aspx?docnum=9303">Doc 9303 Part 10: Logical Data Structure (LDS) for Storage of Biometrics and Other Data in the Contactless Integrated Circuit (IC)</a>,
/// Chapter 4. LDS1 eMRTD Application.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNLds1ElementaryFileId, "Lds1ElementaryFileId", open) {
/// The data group presence list.
  DOTNLds1ElementaryFileIdCom = 0,
/// The security document.
  DOTNLds1ElementaryFileIdSod = 1,
/// File identifier for data group 1. Data group 1 contains the MRZ.
  DOTNLds1ElementaryFileIdDg1 = 2,
/// File identifier for data group 2. Data group 2 contains face image data.
  DOTNLds1ElementaryFileIdDg2 = 3,
/// File identifier for data group 3. Data group 3 contains finger print data.
  DOTNLds1ElementaryFileIdDg3 = 4,
/// File identifier for data group 4. Data group 4 contains iris data.
  DOTNLds1ElementaryFileIdDg4 = 5,
/// File identifier for data group 5. Data group 5 contains displayed portrait.
  DOTNLds1ElementaryFileIdDg5 = 6,
/// File identifier for data group 7. Data group 7 contains displayed signature.
  DOTNLds1ElementaryFileIdDg7 = 7,
/// File identifier for data group 8. Data group 8 contains data features.
  DOTNLds1ElementaryFileIdDg8 = 8,
/// File identifier for data group 9. Data group 9 contains structure features.
  DOTNLds1ElementaryFileIdDg9 = 9,
/// File identifier for data group 10. Data group 10 contains substance features.
  DOTNLds1ElementaryFileIdDg10 = 10,
/// File identifier for data group 11. Data group 11 contains additional personal details.
  DOTNLds1ElementaryFileIdDg11 = 11,
/// File identifier for data group 12. Data group 12 contains additional document details.
  DOTNLds1ElementaryFileIdDg12 = 12,
/// File identifier for data group 13. Data group 13 contains optional details.
  DOTNLds1ElementaryFileIdDg13 = 13,
/// File identifier for data group 14. Data group 14 contains security information.
  DOTNLds1ElementaryFileIdDg14 = 14,
/// File identifier for data group 15. Data group 15 contains the public key used for Active Authentication.
  DOTNLds1ElementaryFileIdDg15 = 15,
/// File identifier for data group 16. Data group 16 contains person(s) to notify.
  DOTNLds1ElementaryFileIdDg16 = 16,
};


/// Raw representation of Logical Data Structure version 1 eMRTD application stored in the NFC chip of the travel document.
SWIFT_CLASS_NAMED("Lds1eMrtdApplication") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNLds1eMrtdApplication : NSObject
/// Raw data group COM.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nonnull comHeaderAndDataGroupPresenceInformation;
/// Raw data group SOD.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nonnull sodDocumentSecurityObject;
/// Raw data group DG1.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nonnull dg1MachineReadableZoneInformation;
/// Raw data group DG2.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nonnull dg2EncodedIdentificationFeaturesFace;
/// Raw data group DG3.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg3AdditionalIdentificationFeatureFingers;
/// Raw data group DG4.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg4AdditionalIdentificationFeatureIrises;
/// Raw data group DG5.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg5DisplayedPortrait;
/// Raw data group DG7.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg7DisplayedSignatureOrUsualMark;
/// Raw data group DG8.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg8DataFeatures;
/// Raw data group DG9.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg9StructureFeatures;
/// Raw data group DG10.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg10SubstanceFeatures;
/// Raw data group DG11.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg11AdditionalPersonalDetails;
/// Raw data group DG12.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg12AdditionalDocumentDetails;
/// Raw data group DG13.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg13OptionalDetails;
/// Raw data group DG14.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg14SecurityOptions;
/// Raw data group DG15.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg15ActiveAuthenticationPublicKeyInfo;
/// Raw data group DG16.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg16PersonsToNotify;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithComHeaderAndDataGroupPresenceInformation:(DOTNLds1ElementaryFile * _Nonnull)comHeaderAndDataGroupPresenceInformation sodDocumentSecurityObject:(DOTNLds1ElementaryFile * _Nonnull)sodDocumentSecurityObject dg1MachineReadableZoneInformation:(DOTNLds1ElementaryFile * _Nonnull)dg1MachineReadableZoneInformation dg2EncodedIdentificationFeaturesFace:(DOTNLds1ElementaryFile * _Nonnull)dg2EncodedIdentificationFeaturesFace dg3AdditionalIdentificationFeatureFingers:(DOTNLds1ElementaryFile * _Nullable)dg3AdditionalIdentificationFeatureFingers dg4AdditionalIdentificationFeatureIrises:(DOTNLds1ElementaryFile * _Nullable)dg4AdditionalIdentificationFeatureIrises dg5DisplayedPortrait:(DOTNLds1ElementaryFile * _Nullable)dg5DisplayedPortrait dg7DisplayedSignatureOrUsualMark:(DOTNLds1ElementaryFile * _Nullable)dg7DisplayedSignatureOrUsualMark dg8DataFeatures:(DOTNLds1ElementaryFile * _Nullable)dg8DataFeatures dg9StructureFeatures:(DOTNLds1ElementaryFile * _Nullable)dg9StructureFeatures dg10SubstanceFeatures:(DOTNLds1ElementaryFile * _Nullable)dg10SubstanceFeatures dg11AdditionalPersonalDetails:(DOTNLds1ElementaryFile * _Nullable)dg11AdditionalPersonalDetails dg12AdditionalDocumentDetails:(DOTNLds1ElementaryFile * _Nullable)dg12AdditionalDocumentDetails dg13OptionalDetails:(DOTNLds1ElementaryFile * _Nullable)dg13OptionalDetails dg14SecurityOptions:(DOTNLds1ElementaryFile * _Nullable)dg14SecurityOptions dg15ActiveAuthenticationPublicKeyInfo:(DOTNLds1ElementaryFile * _Nullable)dg15ActiveAuthenticationPublicKeyInfo dg16PersonsToNotify:(DOTNLds1ElementaryFile * _Nullable)dg16PersonsToNotify OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end



/// Raw represenation of the whole content stored in the NFC chip of the travel document.
SWIFT_CLASS_NAMED("LdsMasterFile") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNLdsMasterFile : NSObject
/// Raw LDS1 eMRTD application content.
@property (nonatomic, readonly, strong) DOTNLds1eMrtdApplication * _Nonnull lds1eMrtdApplication;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLds1eMrtdApplication:(DOTNLds1eMrtdApplication * _Nonnull)lds1eMrtdApplication OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@class NSBundle;

/// Class responsible for the localization of user interface strings.
SWIFT_CLASS_NAMED("Localization") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNLocalization : NSObject
/// You can override default iOS localization mechanism by providing custom translation dictionary.
/// note:
/// You also need to set <code>useLocalizationDictionary</code> flag to <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable localizationDictionary;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)localizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)value;
/// If you set this to <code>true</code>, <code>localizationDictionary</code> will be used to localize strings. Default value is <code>false</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL useLocalizationDictionary;)
+ (BOOL)useLocalizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setUseLocalizationDictionary:(BOOL)value;
/// Bundle used to localize strings.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setBundle:(NSBundle * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Static class responsible for generating logs. You can configure log level.
SWIFT_CLASS_NAMED("Logger") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Log level currently in use. Default value is <code>.none</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum DOTLoggerLogLevel logLevel;)
+ (enum DOTLoggerLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum DOTLoggerLogLevel)newValue;
+ (void)debug:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)info:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)warning:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)error:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
@end


@class DOTMachineReadableZone;

/// Contents of DG1 - Machine readable zone information.
SWIFT_CLASS_NAMED("MachineReadableZoneInformation") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNMachineReadableZoneInformation : NSObject
/// Contains parsed MRZ of one specific travel document type.
@property (nonatomic, readonly, strong) DOTMachineReadableZone * _Nonnull machineReadableZone;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithMachineReadableZone:(DOTMachineReadableZone * _Nonnull)machineReadableZone OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end



/// Name of travel document holder.
SWIFT_CLASS_NAMED("NameOfHolder") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNameOfHolder : NSObject
/// Primary identifier, usually represents surname.
@property (nonatomic, readonly, copy) NSString * _Nullable primaryIdentifier;
/// Secondary identifier, usually represents given names.
@property (nonatomic, readonly, copy) NSString * _Nullable secondaryIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithPrimaryIdentifier:(NSString * _Nullable)primaryIdentifier secondaryIdentifier:(NSString * _Nullable)secondaryIdentifier OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// NFC key created from document number, date of expiry and date of birth.
SWIFT_CLASS_NAMED("NfcKey") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcKey : NSObject
/// Document number in MRZ format.
@property (nonatomic, readonly, copy) NSString * _Nonnull documentNumber;
/// Date of expiry in MRZ format [yyMMdd].
@property (nonatomic, readonly, copy) NSString * _Nonnull dateOfExpiry;
/// Date of birth in MRZ format [yyMMdd].
@property (nonatomic, readonly, copy) NSString * _Nonnull dateOfBirth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithDocumentNumber:(NSString * _Nonnull)documentNumber dateOfExpiry:(NSString * _Nonnull)dateOfExpiry dateOfBirth:(NSString * _Nonnull)dateOfBirth error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class DOTNNfcTravelDocumentReaderConfiguration;
@protocol DOTNNfcTravelDocumentReaderDelegate;

/// Non-UI component for reading travel documents using NFC technology.
SWIFT_CLASS_NAMED("NfcTravelDocumentReader") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcTravelDocumentReader : NSObject
/// Current configuration.
@property (nonatomic, readonly, strong) DOTNNfcTravelDocumentReaderConfiguration * _Nonnull configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize and configure <code>NfcTravelDocumentReader</code>.
- (nonnull instancetype)initWithConfiguration:(DOTNNfcTravelDocumentReaderConfiguration * _Nonnull)configuration;
/// Set delegate and <code>DispatchQueue</code> on which you want to recieve the delegate callbacks. <code>NfcTravelDocumentReader</code> will hold weak reference to <code>delegate</code> and <code>queue</code>.
- (void)setDelegate:(id <DOTNNfcTravelDocumentReaderDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)queue;
/// Read passport using NFC key.
/// You can handle success or failure of NFC reading by implementing the delegate methods.
/// \param nfcKey NFC key created from the document number, date of expiry and date of birth.
///
/// \param activeAuthenticationChallenge Random 8 bytes. If the Active Authentication challenge is set, Active Authentication protocol will be used for the authentication of the chip (if supported by the chip). Response (signature) will be returned in the result of the read operation. This response should be validated by the application server to verify the authenticity of the chip. In case when the Active Authentication protocol is not supported by the chip, the chip will be authenticated the same way as if the argument <code>activeAuthenticationChallenge</code> is not set.
///
- (void)readWithNfcKey:(DOTNNfcKey * _Nonnull)nfcKey activeAuthenticationChallenge:(NSData * _Nullable)activeAuthenticationChallenge;
@end


SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcTravelDocumentReader (SWIFT_EXTENSION(DotNfc))
@end


/// NFC reading error.
SWIFT_CLASS_NAMED("Error") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcTravelDocumentReaderError : NSObject
@property (nonatomic, readonly, strong) DOTNDebugInfo * _Nonnull debugInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcTravelDocumentReader (SWIFT_EXTENSION(DotNfc))
@end

@class NSURL;

/// Configuration options for <code>NfcTravelDocumentReader</code>.
SWIFT_CLASS_NAMED("Configuration") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcTravelDocumentReaderConfiguration : NSObject
/// File URL with Country Signing Certificate Authority (CSCA) certificates in <code>PEM</code> format.
@property (nonatomic, readonly, copy) NSURL * _Nullable authorityCertificatesUrl;
@property (nonatomic, readonly) BOOL _debugInfoEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAuthorityCertificatesUrl:(NSURL * _Nullable)authorityCertificatesUrl _debugInfoEnabled:(BOOL)_debugInfoEnabled OBJC_DESIGNATED_INITIALIZER;
@end


@class DOTNTravelDocument;

/// Implement this delegate to handle the NFC reading events.
SWIFT_PROTOCOL_NAMED("NfcTravelDocumentReaderDelegate") SWIFT_AVAILABILITY(ios,introduced=13)
@protocol DOTNNfcTravelDocumentReaderDelegate
/// Tells the delegate that NFC reading has finished successfully with travel document as a result.
- (void)nfcTravelDocumentReader:(DOTNNfcTravelDocumentReader * _Nonnull)nfcTravelDocumentReader succeeded:(DOTNTravelDocument * _Nonnull)travelDocument;
/// Tells the delegate that NFC reading has failed with an error.
- (void)nfcTravelDocumentReader:(DOTNNfcTravelDocumentReader * _Nonnull)nfcTravelDocumentReader failed:(DOTNNfcTravelDocumentReaderError * _Nonnull)error;
/// Tells the delegate that NFC reading has been canceled by the system dialog cancel button on click event.
- (void)nfcTravelDocumentReaderCanceled:(DOTNNfcTravelDocumentReader * _Nonnull)nfcTravelDocumentReader;
@end


/// Contents of DG13 - Optional details.
SWIFT_CLASS_NAMED("OptionalDetails") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNOptionalDetails : NSObject
/// Raw content.
@property (nonatomic, readonly, copy) NSData * _Nullable content;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithContent:(NSData * _Nullable)content OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end



/// Result of NFC reading.
SWIFT_CLASS_NAMED("TravelDocument") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNTravelDocument : NSObject
/// Logical data structure version.
@property (nonatomic, readonly, copy) NSString * _Nonnull ldsVersion;
/// Access Control protocol used to read the document.
@property (nonatomic, readonly) enum DOTNAccessControlProtocol accessControlProtocolUsed;
/// Authentication status of data and chip.
@property (nonatomic, readonly, strong) DOTNAuthenticationStatus * _Nonnull authenticationStatus;
/// Logical data structure master file. Contains raw data read from the document.
@property (nonatomic, readonly, strong) DOTNLdsMasterFile * _Nonnull ldsMasterFile;
/// Contents of DG1 - Machine readable zone information.
@property (nonatomic, readonly, strong) DOTNMachineReadableZoneInformation * _Nonnull machineReadableZoneInformation;
/// Contents of DG2 - Face image.
@property (nonatomic, readonly, strong) DOTNEncodedIdentificationFeaturesFace * _Nonnull encodedIdentificationFeaturesFace;
/// Contents of DG7 - Displayed signature or usual mark.
@property (nonatomic, readonly, strong) DOTNDisplayedSignatureOrUsualMark * _Nullable displayedSignatureOrUsualMark;
/// Contents of DG11 - Additional personal details.
@property (nonatomic, readonly, strong) DOTNAdditionalPersonalDetails * _Nullable additionalPersonalDetails;
/// Contents of DG12 - Additional document details.
@property (nonatomic, readonly, strong) DOTNAdditionalDocumentDetails * _Nullable additionalDocumentDetails;
/// Contents of DG13 - Optional details.
@property (nonatomic, readonly, strong) DOTNOptionalDetails * _Nullable optionalDetails;
@property (nonatomic, readonly, strong) DOTNDebugInfo * _Nonnull debugInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLdsVersion:(NSString * _Nonnull)ldsVersion accessControlProtocolUsed:(enum DOTNAccessControlProtocol)accessControlProtocolUsed authenticationStatus:(DOTNAuthenticationStatus * _Nonnull)authenticationStatus ldsMasterFile:(DOTNLdsMasterFile * _Nonnull)ldsMasterFile machineReadableZoneInformation:(DOTNMachineReadableZoneInformation * _Nonnull)machineReadableZoneInformation encodedIdentificationFeaturesFace:(DOTNEncodedIdentificationFeaturesFace * _Nonnull)encodedIdentificationFeaturesFace displayedSignatureOrUsualMark:(DOTNDisplayedSignatureOrUsualMark * _Nullable)displayedSignatureOrUsualMark additionalPersonalDetails:(DOTNAdditionalPersonalDetails * _Nullable)additionalPersonalDetails additionalDocumentDetails:(DOTNAdditionalDocumentDetails * _Nullable)additionalDocumentDetails optionalDetails:(DOTNOptionalDetails * _Nullable)optionalDetails debugInfo:(DOTNDebugInfo * _Nonnull)debugInfo OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef DOTNFC_SWIFT_H
#define DOTNFC_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import DotCore;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DotNfc",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// Access Control protocol.
/// The prurpose of Access Control protocol is to establish connection between the device and the NFC chip of the travel document.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNAccessControlProtocol, "AccessControlProtocol", open) {
/// Basic Access Control
  DOTNAccessControlProtocolBac = 0,
/// Password Authenticated Connection Establishment
  DOTNAccessControlProtocolPace = 1,
};

@class NSString;

/// Access Control protocol wrapper.
SWIFT_CLASS_NAMED("AccessControlProtocolWrapper") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNAccessControlProtocolWrapper : NSObject
@property (nonatomic, readonly) enum DOTNAccessControlProtocol accessControlProtocol;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAccessControlProtocol:(enum DOTNAccessControlProtocol)accessControlProtocol OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Contents of DG12 - Additional document details.
SWIFT_CLASS_NAMED("AdditionalDocumentDetails") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNAdditionalDocumentDetails : NSObject
/// Issuing Authority.
@property (nonatomic, readonly, copy) NSString * _Nullable issuingAuthority;
/// Full date of issue.
@property (nonatomic, readonly, copy) NSString * _Nullable dateOfIssue;
/// Endorsements or observations.
@property (nonatomic, readonly, copy) NSString * _Nullable endorsementsOrObservations;
/// Tax or exit requirements.
@property (nonatomic, readonly, copy) NSString * _Nullable taxOrExitRequirements;
/// Date and time of document personalization.
@property (nonatomic, readonly, copy) NSString * _Nullable personalizationTime;
/// Serial number of personalization device.
@property (nonatomic, readonly, copy) NSString * _Nullable personalizationDeviceSerialNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithIssuingAuthority:(NSString * _Nullable)issuingAuthority dateOfIssue:(NSString * _Nullable)dateOfIssue endorsementsOrObservations:(NSString * _Nullable)endorsementsOrObservations taxOrExitRequirements:(NSString * _Nullable)taxOrExitRequirements personalizationTime:(NSString * _Nullable)personalizationTime personalizationDeviceSerialNumber:(NSString * _Nullable)personalizationDeviceSerialNumber OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@class DOTNNameOfHolder;

/// Contents of DG11 - Additional personal details.
SWIFT_CLASS_NAMED("AdditionalPersonalDetails") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNAdditionalPersonalDetails : NSObject
/// Full name of document holder.
@property (nonatomic, readonly, strong) DOTNNameOfHolder * _Nullable nameOfHolder;
/// Other names.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable otherNames;
/// Personal number.
@property (nonatomic, readonly, copy) NSString * _Nullable personalNumber;
/// Full date of birth.
@property (nonatomic, readonly, copy) NSString * _Nullable fullDateOfBirth;
/// Place of birth.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable placeOfBirth;
/// Permanent address.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable address;
/// Telephone
@property (nonatomic, readonly, copy) NSString * _Nullable telephone;
/// Profession.
@property (nonatomic, readonly, copy) NSString * _Nullable profession;
/// Title.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Personal summary.
@property (nonatomic, readonly, copy) NSString * _Nullable personalSummary;
/// Other valid travel document numbers.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable otherValidTravelDocumentNumbers;
/// Custody information.
@property (nonatomic, readonly, copy) NSString * _Nullable custodyInformation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithNameOfHolder:(DOTNNameOfHolder * _Nullable)nameOfHolder otherNames:(NSArray<NSString *> * _Nullable)otherNames personalNumber:(NSString * _Nullable)personalNumber fullDateOfBirth:(NSString * _Nullable)fullDateOfBirth placeOfBirth:(NSArray<NSString *> * _Nullable)placeOfBirth address:(NSArray<NSString *> * _Nullable)address telephone:(NSString * _Nullable)telephone profession:(NSString * _Nullable)profession title:(NSString * _Nullable)title personalSummary:(NSString * _Nullable)personalSummary otherValidTravelDocumentNumbers:(NSArray<NSString *> * _Nullable)otherValidTravelDocumentNumbers custodyInformation:(NSString * _Nullable)custodyInformation OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@class DOTNDataAuthenticationStatus;
@class DOTNChipAuthenticationStatus;

/// Authentication status of data and chip.
SWIFT_CLASS_NAMED("AuthenticationStatus") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNAuthenticationStatus : NSObject
/// Data authentication status (using Passing Authentication protocol).
@property (nonatomic, readonly, strong) DOTNDataAuthenticationStatus * _Nonnull data;
/// Chip authentication status (using either PACE - Chip Authentication Mapping, Chip Authentication or Active Authentication protocol).
@property (nonatomic, readonly, strong) DOTNChipAuthenticationStatus * _Nonnull chip;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(DOTNDataAuthenticationStatus * _Nonnull)data chip:(DOTNChipAuthenticationStatus * _Nonnull)chip OBJC_DESIGNATED_INITIALIZER;
@end

enum DOTNChipAuthenticationStatusStatus : NSInteger;
@class DOTNChipAuthenticationStatusWrappedProtocol;
@class NSData;

/// Authentication status of the chip and protocol used for that purpose.
SWIFT_CLASS_NAMED("ChipAuthenticationStatus") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNChipAuthenticationStatus : NSObject
/// Status of the authentication process.
@property (nonatomic, readonly) enum DOTNChipAuthenticationStatusStatus status;
/// Protocol used for that purpose.
@property (nonatomic, readonly, strong) DOTNChipAuthenticationStatusWrappedProtocol * _Nullable authenticationProtocol;
/// The Active Authentication response (signature) is set only if explicit challenge <code>activeAuthenticationChallenge</code> in <code>NfcTravelDocumentReader.read</code> operation was set by the caller and Active Authentication protocol is supported by the chip. Otherwise <code>activeAuthenticationResponse</code> is nil.
@property (nonatomic, readonly, copy) NSData * _Nullable activeAuthenticationResponse;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStatus:(enum DOTNChipAuthenticationStatusStatus)status wrappedProtocol:(DOTNChipAuthenticationStatusWrappedProtocol * _Nullable)wrappedProtocol activeAuthenticationResponse:(NSData * _Nullable)activeAuthenticationResponse;
@end

/// Authentication status of the chip.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNChipAuthenticationStatusStatus, "Status", open) {
/// Chip is proved genuine.
  DOTNChipAuthenticationStatusStatusAuthenticated = 0,
/// Chip is proved not genuine.
  DOTNChipAuthenticationStatusStatusDenied = 1,
/// No such protocol supported by the chip.
  DOTNChipAuthenticationStatusStatusNotSupported = 2,
};

enum DOTNChipAuthenticationStatusProtocol : NSInteger;

/// Objective-C wrapper of <code>AuthenticationProtocol</code>.
SWIFT_CLASS_NAMED("WrappedProtocol")
@interface DOTNChipAuthenticationStatusWrappedProtocol : NSObject
@property (nonatomic, readonly) enum DOTNChipAuthenticationStatusProtocol authenticationProtocol;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAuthenticationProtocol:(enum DOTNChipAuthenticationStatusProtocol)authenticationProtocol OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

/// Protocol for authentication of the chip.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNChipAuthenticationStatusProtocol, "AuthenticationProtocol", open) {
/// PACE access protocol with Chip Authentication Mapping. This protocol has top priority.
  DOTNChipAuthenticationStatusProtocolPaceChipAuthenticationMapping = 0,
/// Chip Authentication protocol. Used if PACE-CAM is not supported.
  DOTNChipAuthenticationStatusProtocolChipAuthentication = 1,
/// Active Authentication protocol. Used if neither PACE-CAM nor Chip Authentication protocol is supported.
  DOTNChipAuthenticationStatusProtocolActiveAuthentication = 2,
};

enum DOTNDataAuthenticationStatusStatus : NSInteger;
enum DOTNDataAuthenticationStatusProtocol : NSInteger;

/// Authentication status of the data and protocol used for that purpose.
SWIFT_CLASS_NAMED("DataAuthenticationStatus") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNDataAuthenticationStatus : NSObject
/// Status of the authentication process.
@property (nonatomic, readonly) enum DOTNDataAuthenticationStatusStatus status;
/// Protocol used for that purpose.
@property (nonatomic, readonly) enum DOTNDataAuthenticationStatusProtocol authenticationProtocol;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStatus:(enum DOTNDataAuthenticationStatusStatus)status authenticationProtocol:(enum DOTNDataAuthenticationStatusProtocol)authenticationProtocol OBJC_DESIGNATED_INITIALIZER;
@end

/// Authentication status of the data.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNDataAuthenticationStatusStatus, "Status", open) {
/// Data is proved genuine.
  DOTNDataAuthenticationStatusStatusAuthenticated = 0,
/// Data is proved not genuine.
  DOTNDataAuthenticationStatusStatusDenied = 1,
/// Unable to evaluate. No authority certificates provided.
  DOTNDataAuthenticationStatusStatusAuthorityCertificatesNotProvided = 2,
};

/// Protocol for authentication of the data.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNDataAuthenticationStatusProtocol, "AuthenticationProtocol", open) {
/// Passive Authentication protocol.
  DOTNDataAuthenticationStatusProtocolPassiveAuthentication = 0,
};


SWIFT_CLASS_NAMED("DebugEvent")
@interface DOTNDebugEvent : NSObject
@property (nonatomic, readonly) NSInteger timestamp;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

@class DOTNNfcKey;
@class DOTNLdsMasterFile;

SWIFT_CLASS_NAMED("DebugInfo") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNDebugInfo : NSObject
@property (nonatomic, readonly, strong) DOTNNfcKey * _Nullable nfcKey;
@property (nonatomic, readonly, copy) NSData * _Nullable activeAuthenticationChallenge;
@property (nonatomic, readonly, strong) DOTNAccessControlProtocolWrapper * _Nullable accessControlProtocol;
@property (nonatomic, readonly, strong) DOTNChipAuthenticationStatus * _Nullable chipAuthenticationStatus;
@property (nonatomic, readonly, strong) DOTNLdsMasterFile * _Nullable ldsMasterFile;
@property (nonatomic, readonly, strong) DOTNDataAuthenticationStatus * _Nullable dataAuthenticationStatus;
@property (nonatomic, readonly, copy) NSArray<DOTNDebugEvent *> * _Nonnull events;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

@class DOTNImage;

/// Contents of DG7 - Displayed signature or usual mark.
SWIFT_CLASS_NAMED("DisplayedSignatureOrUsualMark") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNDisplayedSignatureOrUsualMark : NSObject
/// Image of a signature of document holder.
@property (nonatomic, readonly, strong) DOTNImage * _Nullable displayedSignatureOrUsualMarkImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDisplayedSignatureOrUsualMarkImage:(DOTNImage * _Nullable)displayedSignatureOrUsualMarkImage OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@protocol DotSdkLicenseProxyProtocol;

/// Class responsible for the <code>DotNfc</code> library initialization.
SWIFT_CLASS("_TtC6DotNfc13DotNfcLibrary") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DotNfcLibrary : NSObject <DotLibrary>
/// The library identifier.
@property (nonatomic, readonly) enum DotLibraryId id;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize library with license.
/// \param license <code>DotSdk</code> license.
///
- (BOOL)initializeWithLicense:(id <DotSdkLicenseProxyProtocol> _Nonnull)license error:(NSError * _Nullable * _Nullable)error;
/// Deinitialize library.
- (BOOL)deinitializeAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Verify that library is initialized.
- (BOOL)verifyIsActiveAndReturnError:(NSError * _Nullable * _Nullable)error;
@end


/// Contents of DG2 - Face image.
SWIFT_CLASS_NAMED("EncodedIdentificationFeaturesFace") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNEncodedIdentificationFeaturesFace : NSObject
/// Face image of document holder.
@property (nonatomic, readonly, strong) DOTNImage * _Nullable faceImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFaceImage:(DOTNImage * _Nullable)faceImage OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end



/// This class can parse input data as a flat tag structure which can be present in Data Groups. For example, this class should be able to parse <code>OptionalDetails.content</code> of some documents.
SWIFT_CLASS("_TtC6DotNfc22FlatTagStructureParser") SWIFT_AVAILABILITY(ios,introduced=13)
@interface FlatTagStructureParser : NSObject
/// Parse flat tag structure and return (tag, value) pairs as a dictionary.
/// \param value Input data.
///
///
/// throws:
/// Invalid input structure error.
///
/// returns:
/// Dictionary as a result.
- (NSDictionary<NSNumber *, NSData *> * _Nullable)parseWithValue:(NSData * _Nonnull)value error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DOTNImageFormat : NSInteger;
@class DOTImageSize;

/// Raw image data representation.
SWIFT_CLASS_NAMED("Image") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNImage : NSObject
/// Image data.
@property (nonatomic, readonly, copy) NSData * _Nonnull bytes;
/// Image format.
@property (nonatomic, readonly) enum DOTNImageFormat format;
/// Image size.
@property (nonatomic, readonly, strong) DOTImageSize * _Nonnull size;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithBytes:(NSData * _Nonnull)bytes format:(enum DOTNImageFormat)format size:(DOTImageSize * _Nonnull)size OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// Supported image formats.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNImageFormat, "ImageFormat", open) {
/// JPEG
  DOTNImageFormatJpeg = 0,
/// JPEG2000
  DOTNImageFormatJpeg2000 = 1,
};

enum DOTNLds1ElementaryFileId : NSInteger;

/// Raw representation of a single file in Logical Data Structure version 1 stored in the NFC chip of the travel document.
SWIFT_CLASS_NAMED("Lds1ElementaryFile") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNLds1ElementaryFile : NSObject
/// File identifier.
@property (nonatomic, readonly) enum DOTNLds1ElementaryFileId id;
/// File data.
@property (nonatomic, readonly, copy) NSData * _Nullable bytes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithId:(enum DOTNLds1ElementaryFileId)id bytes:(NSData * _Nullable)bytes OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Identifier of the LDS1 Elementary File.
/// More details about Elementary Files can be found in <a href="https://www.icao.int/publications/pages/publication.aspx?docnum=9303">Doc 9303 Part 10: Logical Data Structure (LDS) for Storage of Biometrics and Other Data in the Contactless Integrated Circuit (IC)</a>,
/// Chapter 4. LDS1 eMRTD Application.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTNLds1ElementaryFileId, "Lds1ElementaryFileId", open) {
/// The data group presence list.
  DOTNLds1ElementaryFileIdCom = 0,
/// The security document.
  DOTNLds1ElementaryFileIdSod = 1,
/// File identifier for data group 1. Data group 1 contains the MRZ.
  DOTNLds1ElementaryFileIdDg1 = 2,
/// File identifier for data group 2. Data group 2 contains face image data.
  DOTNLds1ElementaryFileIdDg2 = 3,
/// File identifier for data group 3. Data group 3 contains finger print data.
  DOTNLds1ElementaryFileIdDg3 = 4,
/// File identifier for data group 4. Data group 4 contains iris data.
  DOTNLds1ElementaryFileIdDg4 = 5,
/// File identifier for data group 5. Data group 5 contains displayed portrait.
  DOTNLds1ElementaryFileIdDg5 = 6,
/// File identifier for data group 7. Data group 7 contains displayed signature.
  DOTNLds1ElementaryFileIdDg7 = 7,
/// File identifier for data group 8. Data group 8 contains data features.
  DOTNLds1ElementaryFileIdDg8 = 8,
/// File identifier for data group 9. Data group 9 contains structure features.
  DOTNLds1ElementaryFileIdDg9 = 9,
/// File identifier for data group 10. Data group 10 contains substance features.
  DOTNLds1ElementaryFileIdDg10 = 10,
/// File identifier for data group 11. Data group 11 contains additional personal details.
  DOTNLds1ElementaryFileIdDg11 = 11,
/// File identifier for data group 12. Data group 12 contains additional document details.
  DOTNLds1ElementaryFileIdDg12 = 12,
/// File identifier for data group 13. Data group 13 contains optional details.
  DOTNLds1ElementaryFileIdDg13 = 13,
/// File identifier for data group 14. Data group 14 contains security information.
  DOTNLds1ElementaryFileIdDg14 = 14,
/// File identifier for data group 15. Data group 15 contains the public key used for Active Authentication.
  DOTNLds1ElementaryFileIdDg15 = 15,
/// File identifier for data group 16. Data group 16 contains person(s) to notify.
  DOTNLds1ElementaryFileIdDg16 = 16,
};


/// Raw representation of Logical Data Structure version 1 eMRTD application stored in the NFC chip of the travel document.
SWIFT_CLASS_NAMED("Lds1eMrtdApplication") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNLds1eMrtdApplication : NSObject
/// Raw data group COM.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nonnull comHeaderAndDataGroupPresenceInformation;
/// Raw data group SOD.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nonnull sodDocumentSecurityObject;
/// Raw data group DG1.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nonnull dg1MachineReadableZoneInformation;
/// Raw data group DG2.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nonnull dg2EncodedIdentificationFeaturesFace;
/// Raw data group DG3.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg3AdditionalIdentificationFeatureFingers;
/// Raw data group DG4.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg4AdditionalIdentificationFeatureIrises;
/// Raw data group DG5.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg5DisplayedPortrait;
/// Raw data group DG7.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg7DisplayedSignatureOrUsualMark;
/// Raw data group DG8.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg8DataFeatures;
/// Raw data group DG9.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg9StructureFeatures;
/// Raw data group DG10.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg10SubstanceFeatures;
/// Raw data group DG11.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg11AdditionalPersonalDetails;
/// Raw data group DG12.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg12AdditionalDocumentDetails;
/// Raw data group DG13.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg13OptionalDetails;
/// Raw data group DG14.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg14SecurityOptions;
/// Raw data group DG15.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg15ActiveAuthenticationPublicKeyInfo;
/// Raw data group DG16.
@property (nonatomic, readonly, strong) DOTNLds1ElementaryFile * _Nullable dg16PersonsToNotify;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithComHeaderAndDataGroupPresenceInformation:(DOTNLds1ElementaryFile * _Nonnull)comHeaderAndDataGroupPresenceInformation sodDocumentSecurityObject:(DOTNLds1ElementaryFile * _Nonnull)sodDocumentSecurityObject dg1MachineReadableZoneInformation:(DOTNLds1ElementaryFile * _Nonnull)dg1MachineReadableZoneInformation dg2EncodedIdentificationFeaturesFace:(DOTNLds1ElementaryFile * _Nonnull)dg2EncodedIdentificationFeaturesFace dg3AdditionalIdentificationFeatureFingers:(DOTNLds1ElementaryFile * _Nullable)dg3AdditionalIdentificationFeatureFingers dg4AdditionalIdentificationFeatureIrises:(DOTNLds1ElementaryFile * _Nullable)dg4AdditionalIdentificationFeatureIrises dg5DisplayedPortrait:(DOTNLds1ElementaryFile * _Nullable)dg5DisplayedPortrait dg7DisplayedSignatureOrUsualMark:(DOTNLds1ElementaryFile * _Nullable)dg7DisplayedSignatureOrUsualMark dg8DataFeatures:(DOTNLds1ElementaryFile * _Nullable)dg8DataFeatures dg9StructureFeatures:(DOTNLds1ElementaryFile * _Nullable)dg9StructureFeatures dg10SubstanceFeatures:(DOTNLds1ElementaryFile * _Nullable)dg10SubstanceFeatures dg11AdditionalPersonalDetails:(DOTNLds1ElementaryFile * _Nullable)dg11AdditionalPersonalDetails dg12AdditionalDocumentDetails:(DOTNLds1ElementaryFile * _Nullable)dg12AdditionalDocumentDetails dg13OptionalDetails:(DOTNLds1ElementaryFile * _Nullable)dg13OptionalDetails dg14SecurityOptions:(DOTNLds1ElementaryFile * _Nullable)dg14SecurityOptions dg15ActiveAuthenticationPublicKeyInfo:(DOTNLds1ElementaryFile * _Nullable)dg15ActiveAuthenticationPublicKeyInfo dg16PersonsToNotify:(DOTNLds1ElementaryFile * _Nullable)dg16PersonsToNotify OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end



/// Raw represenation of the whole content stored in the NFC chip of the travel document.
SWIFT_CLASS_NAMED("LdsMasterFile") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNLdsMasterFile : NSObject
/// Raw LDS1 eMRTD application content.
@property (nonatomic, readonly, strong) DOTNLds1eMrtdApplication * _Nonnull lds1eMrtdApplication;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLds1eMrtdApplication:(DOTNLds1eMrtdApplication * _Nonnull)lds1eMrtdApplication OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@class NSBundle;

/// Class responsible for the localization of user interface strings.
SWIFT_CLASS_NAMED("Localization") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNLocalization : NSObject
/// You can override default iOS localization mechanism by providing custom translation dictionary.
/// note:
/// You also need to set <code>useLocalizationDictionary</code> flag to <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable localizationDictionary;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)localizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)value;
/// If you set this to <code>true</code>, <code>localizationDictionary</code> will be used to localize strings. Default value is <code>false</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL useLocalizationDictionary;)
+ (BOOL)useLocalizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setUseLocalizationDictionary:(BOOL)value;
/// Bundle used to localize strings.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setBundle:(NSBundle * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Static class responsible for generating logs. You can configure log level.
SWIFT_CLASS_NAMED("Logger") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Log level currently in use. Default value is <code>.none</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum DOTLoggerLogLevel logLevel;)
+ (enum DOTLoggerLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum DOTLoggerLogLevel)newValue;
+ (void)debug:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)info:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)warning:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)error:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
@end


@class DOTMachineReadableZone;

/// Contents of DG1 - Machine readable zone information.
SWIFT_CLASS_NAMED("MachineReadableZoneInformation") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNMachineReadableZoneInformation : NSObject
/// Contains parsed MRZ of one specific travel document type.
@property (nonatomic, readonly, strong) DOTMachineReadableZone * _Nonnull machineReadableZone;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithMachineReadableZone:(DOTMachineReadableZone * _Nonnull)machineReadableZone OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end



/// Name of travel document holder.
SWIFT_CLASS_NAMED("NameOfHolder") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNameOfHolder : NSObject
/// Primary identifier, usually represents surname.
@property (nonatomic, readonly, copy) NSString * _Nullable primaryIdentifier;
/// Secondary identifier, usually represents given names.
@property (nonatomic, readonly, copy) NSString * _Nullable secondaryIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithPrimaryIdentifier:(NSString * _Nullable)primaryIdentifier secondaryIdentifier:(NSString * _Nullable)secondaryIdentifier OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// NFC key created from document number, date of expiry and date of birth.
SWIFT_CLASS_NAMED("NfcKey") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcKey : NSObject
/// Document number in MRZ format.
@property (nonatomic, readonly, copy) NSString * _Nonnull documentNumber;
/// Date of expiry in MRZ format [yyMMdd].
@property (nonatomic, readonly, copy) NSString * _Nonnull dateOfExpiry;
/// Date of birth in MRZ format [yyMMdd].
@property (nonatomic, readonly, copy) NSString * _Nonnull dateOfBirth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithDocumentNumber:(NSString * _Nonnull)documentNumber dateOfExpiry:(NSString * _Nonnull)dateOfExpiry dateOfBirth:(NSString * _Nonnull)dateOfBirth error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class DOTNNfcTravelDocumentReaderConfiguration;
@protocol DOTNNfcTravelDocumentReaderDelegate;

/// Non-UI component for reading travel documents using NFC technology.
SWIFT_CLASS_NAMED("NfcTravelDocumentReader") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcTravelDocumentReader : NSObject
/// Current configuration.
@property (nonatomic, readonly, strong) DOTNNfcTravelDocumentReaderConfiguration * _Nonnull configuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize and configure <code>NfcTravelDocumentReader</code>.
- (nonnull instancetype)initWithConfiguration:(DOTNNfcTravelDocumentReaderConfiguration * _Nonnull)configuration;
/// Set delegate and <code>DispatchQueue</code> on which you want to recieve the delegate callbacks. <code>NfcTravelDocumentReader</code> will hold weak reference to <code>delegate</code> and <code>queue</code>.
- (void)setDelegate:(id <DOTNNfcTravelDocumentReaderDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)queue;
/// Read passport using NFC key.
/// You can handle success or failure of NFC reading by implementing the delegate methods.
/// \param nfcKey NFC key created from the document number, date of expiry and date of birth.
///
/// \param activeAuthenticationChallenge Random 8 bytes. If the Active Authentication challenge is set, Active Authentication protocol will be used for the authentication of the chip (if supported by the chip). Response (signature) will be returned in the result of the read operation. This response should be validated by the application server to verify the authenticity of the chip. In case when the Active Authentication protocol is not supported by the chip, the chip will be authenticated the same way as if the argument <code>activeAuthenticationChallenge</code> is not set.
///
- (void)readWithNfcKey:(DOTNNfcKey * _Nonnull)nfcKey activeAuthenticationChallenge:(NSData * _Nullable)activeAuthenticationChallenge;
@end


SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcTravelDocumentReader (SWIFT_EXTENSION(DotNfc))
@end


/// NFC reading error.
SWIFT_CLASS_NAMED("Error") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcTravelDocumentReaderError : NSObject
@property (nonatomic, readonly, strong) DOTNDebugInfo * _Nonnull debugInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcTravelDocumentReader (SWIFT_EXTENSION(DotNfc))
@end

@class NSURL;

/// Configuration options for <code>NfcTravelDocumentReader</code>.
SWIFT_CLASS_NAMED("Configuration") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNNfcTravelDocumentReaderConfiguration : NSObject
/// File URL with Country Signing Certificate Authority (CSCA) certificates in <code>PEM</code> format.
@property (nonatomic, readonly, copy) NSURL * _Nullable authorityCertificatesUrl;
@property (nonatomic, readonly) BOOL _debugInfoEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAuthorityCertificatesUrl:(NSURL * _Nullable)authorityCertificatesUrl _debugInfoEnabled:(BOOL)_debugInfoEnabled OBJC_DESIGNATED_INITIALIZER;
@end


@class DOTNTravelDocument;

/// Implement this delegate to handle the NFC reading events.
SWIFT_PROTOCOL_NAMED("NfcTravelDocumentReaderDelegate") SWIFT_AVAILABILITY(ios,introduced=13)
@protocol DOTNNfcTravelDocumentReaderDelegate
/// Tells the delegate that NFC reading has finished successfully with travel document as a result.
- (void)nfcTravelDocumentReader:(DOTNNfcTravelDocumentReader * _Nonnull)nfcTravelDocumentReader succeeded:(DOTNTravelDocument * _Nonnull)travelDocument;
/// Tells the delegate that NFC reading has failed with an error.
- (void)nfcTravelDocumentReader:(DOTNNfcTravelDocumentReader * _Nonnull)nfcTravelDocumentReader failed:(DOTNNfcTravelDocumentReaderError * _Nonnull)error;
/// Tells the delegate that NFC reading has been canceled by the system dialog cancel button on click event.
- (void)nfcTravelDocumentReaderCanceled:(DOTNNfcTravelDocumentReader * _Nonnull)nfcTravelDocumentReader;
@end


/// Contents of DG13 - Optional details.
SWIFT_CLASS_NAMED("OptionalDetails") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNOptionalDetails : NSObject
/// Raw content.
@property (nonatomic, readonly, copy) NSData * _Nullable content;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithContent:(NSData * _Nullable)content OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end



/// Result of NFC reading.
SWIFT_CLASS_NAMED("TravelDocument") SWIFT_AVAILABILITY(ios,introduced=13)
@interface DOTNTravelDocument : NSObject
/// Logical data structure version.
@property (nonatomic, readonly, copy) NSString * _Nonnull ldsVersion;
/// Access Control protocol used to read the document.
@property (nonatomic, readonly) enum DOTNAccessControlProtocol accessControlProtocolUsed;
/// Authentication status of data and chip.
@property (nonatomic, readonly, strong) DOTNAuthenticationStatus * _Nonnull authenticationStatus;
/// Logical data structure master file. Contains raw data read from the document.
@property (nonatomic, readonly, strong) DOTNLdsMasterFile * _Nonnull ldsMasterFile;
/// Contents of DG1 - Machine readable zone information.
@property (nonatomic, readonly, strong) DOTNMachineReadableZoneInformation * _Nonnull machineReadableZoneInformation;
/// Contents of DG2 - Face image.
@property (nonatomic, readonly, strong) DOTNEncodedIdentificationFeaturesFace * _Nonnull encodedIdentificationFeaturesFace;
/// Contents of DG7 - Displayed signature or usual mark.
@property (nonatomic, readonly, strong) DOTNDisplayedSignatureOrUsualMark * _Nullable displayedSignatureOrUsualMark;
/// Contents of DG11 - Additional personal details.
@property (nonatomic, readonly, strong) DOTNAdditionalPersonalDetails * _Nullable additionalPersonalDetails;
/// Contents of DG12 - Additional document details.
@property (nonatomic, readonly, strong) DOTNAdditionalDocumentDetails * _Nullable additionalDocumentDetails;
/// Contents of DG13 - Optional details.
@property (nonatomic, readonly, strong) DOTNOptionalDetails * _Nullable optionalDetails;
@property (nonatomic, readonly, strong) DOTNDebugInfo * _Nonnull debugInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLdsVersion:(NSString * _Nonnull)ldsVersion accessControlProtocolUsed:(enum DOTNAccessControlProtocol)accessControlProtocolUsed authenticationStatus:(DOTNAuthenticationStatus * _Nonnull)authenticationStatus ldsMasterFile:(DOTNLdsMasterFile * _Nonnull)ldsMasterFile machineReadableZoneInformation:(DOTNMachineReadableZoneInformation * _Nonnull)machineReadableZoneInformation encodedIdentificationFeaturesFace:(DOTNEncodedIdentificationFeaturesFace * _Nonnull)encodedIdentificationFeaturesFace displayedSignatureOrUsualMark:(DOTNDisplayedSignatureOrUsualMark * _Nullable)displayedSignatureOrUsualMark additionalPersonalDetails:(DOTNAdditionalPersonalDetails * _Nullable)additionalPersonalDetails additionalDocumentDetails:(DOTNAdditionalDocumentDetails * _Nullable)additionalDocumentDetails optionalDetails:(DOTNOptionalDetails * _Nullable)optionalDetails debugInfo:(DOTNDebugInfo * _Nonnull)debugInfo OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
