#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef DOTCORE_SWIFT_H
#define DOTCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DotCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class UIBezierPath;
@class DOTCorners;

SWIFT_CLASS_NAMED("BezierPathFactory")
@interface DOTBezierPathFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (UIBezierPath * _Nonnull)createPlaceholderPathWithRect:(CGRect)rect cornerRadius:(CGFloat)cornerRadius SWIFT_WARN_UNUSED_RESULT;
+ (UIBezierPath * _Nonnull)createDetectionPathWithCorners:(DOTCorners * _Nonnull)corners cornerRadius:(CGFloat)cornerRadius SWIFT_WARN_UNUSED_RESULT;
@end

@class NSData;
@class DOTImageSize;

SWIFT_PROTOCOL("_TtP7DotCore9_RawImage_")
@protocol _RawImage
@property (nonatomic, readonly, copy) NSData * _Nonnull bytes;
@property (nonatomic, readonly, strong) DOTImageSize * _Nonnull size;
@end


/// Raw image with BGR888 pixel format.
SWIFT_CLASS_NAMED("BgrRawImage")
@interface DOTBgrRawImage : NSObject <_RawImage>
@property (nonatomic, readonly) uint8_t * _Nonnull bytesPointer;
/// Image size.
@property (nonatomic, readonly, strong) DOTImageSize * _Nonnull size;
/// Raw image data.
@property (nonatomic, copy) NSData * _Nonnull bytes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Do not use this, use <code>BgrRawImageFactory</code> to create <code>BgrRawImage</code>.
- (nonnull instancetype)initWithBytesPointer:(uint8_t * _Nonnull)bytesPointer size:(DOTImageSize * _Nonnull)size OBJC_DESIGNATED_INITIALIZER;
@end

@class CIImage;
@class CIContext;

/// Create <code>BgrRawImage</code> from iOS native image types.
SWIFT_CLASS_NAMED("BgrRawImageFactory")
@interface DOTBgrRawImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Return a copy of the <code>CGImage</code> as a <code>BgrRawImage</code>object.
/// \param cgImage Input image as a <code>CGImage</code> object.
///
///
/// returns:
/// New <code>BgrRawImage</code> instance.
+ (DOTBgrRawImage * _Nonnull)createWithCgImage:(CGImageRef _Nonnull)cgImage SWIFT_WARN_UNUSED_RESULT;
/// Return a copy of the <code>CIImage</code> as a <code>BgrRawImage</code>object.
/// \param ciImage Input image as a <code>CIImage</code> object.
///
/// \param ciContext CIContext.
///
///
/// returns:
/// New <code>BgrRawImage</code> instance.
+ (DOTBgrRawImage * _Nonnull)createWithCiImage:(CIImage * _Nonnull)ciImage ciContext:(CIContext * _Nonnull)ciContext SWIFT_WARN_UNUSED_RESULT;
@end


/// Raw image with BGRA8888 pixel format.
SWIFT_CLASS_NAMED("BgraRawImage")
@interface DOTBgraRawImage : NSObject <_RawImage>
@property (nonatomic, readonly) uint8_t * _Nonnull bytesPointer;
@property (nonatomic, readonly) uint32_t * _Nonnull bytesPointerPacked;
/// Image size.
@property (nonatomic, readonly, strong) DOTImageSize * _Nonnull size;
/// Raw image data.
@property (nonatomic, copy) NSData * _Nonnull bytes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Do not use this, use <code>BgraRawImageFactory</code> to create <code>BgraRawImage</code>.
- (nonnull instancetype)initWithBytesPointer:(uint8_t * _Nonnull)bytesPointer size:(DOTImageSize * _Nonnull)size OBJC_DESIGNATED_INITIALIZER;
@end


/// Create <code>BgraRawImage</code> from iOS native image types.
SWIFT_CLASS_NAMED("BgraRawImageFactory")
@interface DOTBgraRawImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Return a copy of the <code>CGImage</code> as a <code>BgraRawImage</code> object.
/// \param cgImage Input image as a <code>CGImage</code> object.
///
///
/// returns:
/// New <code>BgraRawImage</code> instance.
+ (DOTBgraRawImage * _Nonnull)createWithCgImage:(CGImageRef _Nonnull)cgImage SWIFT_WARN_UNUSED_RESULT;
/// Return a copy of the <code>CIImage</code> as a <code>BgraRawImage</code> object.
/// \param ciImage Input image as a <code>CIImage</code> object.
///
/// \param ciContext CIContext.
///
///
/// returns:
/// New <code>BgraRawImage</code> instance.
+ (DOTBgraRawImage * _Nonnull)createWithCiImage:(CIImage * _Nonnull)ciImage ciContext:(CIContext * _Nonnull)ciContext SWIFT_WARN_UNUSED_RESULT;
@end


/// Create <code>CGImage</code> from <code>BgraRawImage</code> or <code>BgrRawImage</code>.
SWIFT_CLASS_NAMED("CGImageFactory")
@interface DOTCGImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Return a copy of the <code>BgraRawImage</code> as a <code>CGImage</code> object.
/// \param bgraRawImage Input image as a <code>BgraRawImage</code> object.
///
///
/// returns:
/// New <code>CGImage</code> instance.
+ (CGImageRef _Nonnull)createWithBgraRawImage:(DOTBgraRawImage * _Nonnull)bgraRawImage SWIFT_WARN_UNUSED_RESULT;
/// Return a copy of the <code>BgrRawImage</code> as a <code>CGImage</code> object.
/// \param bgrRawImage Input image as a <code>BgrRawImage</code> object.
///
///
/// returns:
/// New <code>CGImage</code> instance.
+ (CGImageRef _Nonnull)createWithBgrRawImage:(DOTBgrRawImage * _Nonnull)bgrRawImage SWIFT_WARN_UNUSED_RESULT;
@end


/// Create <code>CIImage</code> from <code>BgraRawImage</code> or <code>BgrRawImage</code>.
SWIFT_CLASS_NAMED("CIImageFactory")
@interface DOTCIImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Return a copy of the <code>BgraRawImage</code> as a <code>CIImage</code> object.
/// \param bgraRawImage Input image as a <code>BgraRawImage</code> object.
///
/// \param ciContext CIContext.
///
///
/// returns:
/// New <code>CIImage</code> instance.
+ (CIImage * _Nonnull)createWithBgraRawImage:(DOTBgraRawImage * _Nonnull)bgraRawImage ciContext:(CIContext * _Nonnull)ciContext SWIFT_WARN_UNUSED_RESULT;
/// Return a copy of the <code>BgrRawImage</code> as a <code>CIImage</code> object.
/// \param bgrRawImage Input image as a <code>BgrRawImage</code> object.
///
///
/// returns:
/// New <code>CIImage</code> instance.
+ (CIImage * _Nonnull)createWithBgrRawImage:(DOTBgrRawImage * _Nonnull)bgrRawImage SWIFT_WARN_UNUSED_RESULT;
@end

@class DOTPointDouble;
@class NSString;

/// Four detected corners in an image.
SWIFT_CLASS_NAMED("Corners")
@interface DOTCorners : NSObject
/// Top left corner point.
@property (nonatomic, readonly, strong) DOTPointDouble * _Nonnull topLeft;
/// Top right corner point.
@property (nonatomic, readonly, strong) DOTPointDouble * _Nonnull topRight;
/// Bottom right corner point.
@property (nonatomic, readonly, strong) DOTPointDouble * _Nonnull bottomRight;
/// Bottom left corner point.
@property (nonatomic, readonly, strong) DOTPointDouble * _Nonnull bottomLeft;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTopLeft:(DOTPointDouble * _Nonnull)topLeft topRight:(DOTPointDouble * _Nonnull)topRight bottomRight:(DOTPointDouble * _Nonnull)bottomRight bottomLeft:(DOTPointDouble * _Nonnull)bottomLeft OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

@class DOTRectangleDouble;

@interface DOTCorners (SWIFT_EXTENSION(DotCore))
@property (nonatomic, readonly, copy) NSArray<DOTPointDouble *> * _Nonnull points;
+ (DOTCorners * _Nonnull)fromRectangle:(DOTRectangleDouble * _Nonnull)rectangle SWIFT_WARN_UNUSED_RESULT;
- (DOTCorners * _Nonnull)rebasedWithParentRectangle:(DOTRectangleDouble * _Nonnull)parentRectangle SWIFT_WARN_UNUSED_RESULT;
- (DOTCorners * _Nonnull)mirrored SWIFT_WARN_UNUSED_RESULT;
@end

enum DotLibraryId : NSInteger;
@protocol DotSdkLicenseProxyProtocol;

SWIFT_PROTOCOL("_TtP7DotCore10DotLibrary_")
@protocol DotLibrary
@property (nonatomic, readonly) enum DotLibraryId id;
- (BOOL)initializeWithLicense:(id <DotSdkLicenseProxyProtocol> _Nonnull)license error:(NSError * _Nullable * _Nullable)error;
- (BOOL)deinitializeAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)verifyIsActiveAndReturnError:(NSError * _Nullable * _Nullable)error;
@end

/// The <code>DotSdk</code> library identifier.
typedef SWIFT_ENUM(NSInteger, DotLibraryId, open) {
/// <code>DotFaceLibrary</code> identifier.
  DotLibraryIdFace = 0,
/// <code>DotFaceLiteLibrary</code> identifier.
  DotLibraryIdFaceLite = 1,
/// <code>DotDocumentLibrary</code> identifier.
  DotLibraryIdDocument = 2,
/// <code>DotNfcLibrary</code> identifier.
  DotLibraryIdNfc = 3,
};

@class DotSdkConfiguration;

/// Class responsible for the initialization of DOT libraries - <code>DotFace</code>, <code>DotFaceLite</code>, <code>DotDocument</code>, <code>DotNfc</code>.
SWIFT_CLASS("_TtC7DotCore6DotSdk")
@interface DotSdk : NSObject
/// Shared singleton instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DotSdk * _Nonnull shared;)
+ (DotSdk * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <code>DotSdk</code> version.
@property (nonatomic, readonly, copy) NSString * _Nonnull versionName;
/// Application Bundle ID.
@property (nonatomic, readonly, copy) NSString * _Nonnull bundleId;
/// Flag to determine if <code>DotSdk</code> is initialized.
@property (nonatomic, readonly) BOOL isInitialized;
/// Initialize <code>DotSdk</code> with configuration.
/// This method should be called on the background thread.
/// \param configuration <code>DotSdk</code> configuration.
///
- (BOOL)initializeWithConfiguration:(DotSdkConfiguration * _Nonnull)configuration error:(NSError * _Nullable * _Nullable)error;
/// Initialize license data for further per <code>DotSdk</code> library registration.
/// This method must be called before <code>_initialize(library:)</code> and should be called on the background thread.
/// \param licenseBytes License data.
///
- (BOOL)_initializeWithLicenseBytes:(NSData * _Nonnull)licenseBytes error:(NSError * _Nullable * _Nullable)error;
/// Register <code>DotSdk</code> library.
/// This method must be called after <code>_initialize(licenseBytes:)</code> and should be called on the background thread.
/// \param library <code>DotSdk</code> library.
///
- (BOOL)_initializeWithLibrary:(id <DotLibrary> _Nonnull)library error:(NSError * _Nullable * _Nullable)error;
/// Deinitialize <code>DotSdk</code>.
/// This method should be called on the background thread.
- (BOOL)deinitializeAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Check whether <code>DotSdk</code> library is active.
- (BOOL)isLibraryActiveWithLibraryId:(enum DotLibraryId)libraryId SWIFT_WARN_UNUSED_RESULT;
@end


/// The <code>DotSdk</code> configuration.
SWIFT_CLASS("_TtC7DotCore19DotSdkConfiguration")
@interface DotSdkConfiguration : NSObject
/// License data.
@property (nonatomic, readonly, copy) NSData * _Nonnull licenseBytes;
/// List of <code>DotSdk</code> libraries to use.
@property (nonatomic, readonly, copy) NSArray<id <DotLibrary>> * _Nonnull libraries;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLicenseBytes:(NSData * _Nonnull)licenseBytes libraries:(NSArray<id <DotLibrary>> * _Nonnull)libraries OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7DotCore26DotSdkLicenseProxyProtocol_")
@protocol DotSdkLicenseProxyProtocol
@property (nonatomic, readonly, copy) NSData * _Nonnull licenseBytes;
@property (nonatomic, readonly) BOOL isEvaluation;
@property (nonatomic, readonly) BOOL isRealTimeTransactionReportingEnabled;
@property (nonatomic, readonly) BOOL isFaceEnabled;
@property (nonatomic, readonly) BOOL isFaceEyeGazeLivenessScoreEnabled;
@property (nonatomic, readonly) BOOL isFacePassiveLivenessEnabled;
@property (nonatomic, readonly) BOOL isFaceMatchingEnabled;
@property (nonatomic, readonly) BOOL isFaceLiteEnabled;
@property (nonatomic, readonly) BOOL isDocumentEnabled;
@property (nonatomic, readonly) BOOL isNfcEnabled;
@end


SWIFT_CLASS("_TtC7DotCore18DotSdkLicenseProxy")
@interface DotSdkLicenseProxy : NSObject <DotSdkLicenseProxyProtocol>
@property (nonatomic, readonly, copy) NSData * _Nonnull licenseBytes;
@property (nonatomic, readonly) BOOL isEvaluation;
@property (nonatomic, readonly) BOOL isRealTimeTransactionReportingEnabled;
@property (nonatomic, readonly) BOOL isFaceEnabled;
@property (nonatomic, readonly) BOOL isFaceEyeGazeLivenessScoreEnabled;
@property (nonatomic, readonly) BOOL isFacePassiveLivenessEnabled;
@property (nonatomic, readonly) BOOL isFaceMatchingEnabled;
@property (nonatomic, readonly) BOOL isFaceLiteEnabled;
@property (nonatomic, readonly) BOOL isDocumentEnabled;
@property (nonatomic, readonly) BOOL isNfcEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Image size in pixels.
SWIFT_CLASS_NAMED("ImageSize")
@interface DOTImageSize : NSObject
/// Image width in pixels.
@property (nonatomic, readonly) NSInteger width;
/// Image height in pixels.
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithWidth:(NSInteger)width height:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
/// Calculate the number of pixels of the image.
- (NSInteger)calculatePixelCount SWIFT_WARN_UNUSED_RESULT;
/// Calculate width to height ratio.
- (double)calculateWidthToHeightRatio SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface DOTImageSize (SWIFT_EXTENSION(DotCore))
@property (nonatomic, readonly) CGSize cgSize;
@property (nonatomic, readonly) NSInteger shorterSide;
+ (DOTImageSize * _Nonnull)fromCgSize:(CGSize)cgSize SWIFT_WARN_UNUSED_RESULT;
@end


/// Representation of closed interval with value type <code>Double</code>.
/// The <code>max</code> must be greater than the <code>min</code>.
SWIFT_CLASS_NAMED("IntervalDouble")
@interface DOTIntervalDouble : NSObject
/// Minimal interval value.
@property (nonatomic, readonly) double min;
/// Maximal interval value.
@property (nonatomic, readonly) double max;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithMin:(double)min max:(double)max error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Representation of closed interval with value type <code>Float</code>.
/// The <code>max</code> must be greater than the <code>min</code>.
SWIFT_CLASS_NAMED("IntervalFloat")
@interface DOTIntervalFloat : NSObject
/// Minimal interval value.
@property (nonatomic, readonly) float min;
/// Maximal interval value.
@property (nonatomic, readonly) float max;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithMin:(float)min max:(float)max error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

/// Available log levels.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTLoggerLogLevel, "LoggerLogLevel", open) {
/// Logs events suitable for debugging purposes.
  DOTLoggerLogLevelDebug = 0,
/// Logs informative events.
  DOTLoggerLogLevelInfo = 1,
/// Logs unexpected events which indicate malfunction.
  DOTLoggerLogLevelWarning = 2,
/// Logs failed operations and other errors.
  DOTLoggerLogLevelError = 3,
/// Disables logging.
  DOTLoggerLogLevelNone = 4,
};


/// Two dimensional point with <code>Double</code> value type.
SWIFT_CLASS_NAMED("PointDouble")
@interface DOTPointDouble : NSObject
/// X coordinate.
@property (nonatomic, readonly) double x;
/// Y coordinate.
@property (nonatomic, readonly) double y;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithX:(double)x y:(double)y OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@interface DOTPointDouble (SWIFT_EXTENSION(DotCore))
- (DOTPointDouble * _Nonnull)rebasedWithParentRectangle:(DOTRectangleDouble * _Nonnull)parentRectangle SWIFT_WARN_UNUSED_RESULT;
- (DOTPointDouble * _Nonnull)mirrored SWIFT_WARN_UNUSED_RESULT;
@end


@interface DOTPointDouble (SWIFT_EXTENSION(DotCore))
+ (DOTPointDouble * _Nonnull)fromCgPoint:(CGPoint)cgPoint SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) CGPoint cgPoint;
@end


/// Rectangle area defined by the edges with <code>Double</code> value type.
SWIFT_CLASS_NAMED("RectangleDouble")
@interface DOTRectangleDouble : NSObject
/// Left edge.
@property (nonatomic, readonly) double left;
/// Top edge.
@property (nonatomic, readonly) double top;
/// Right edge.
@property (nonatomic, readonly) double right;
/// Bottom edge.
@property (nonatomic, readonly) double bottom;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLeft:(double)left top:(double)top right:(double)right bottom:(double)bottom OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


@interface DOTRectangleDouble (SWIFT_EXTENSION(DotCore))
@property (nonatomic, readonly, copy) NSArray<DOTPointDouble *> * _Nonnull points;
@property (nonatomic, readonly) CGRect cgRect;
@property (nonatomic, readonly) double width;
@property (nonatomic, readonly) double height;
- (DOTRectangleDouble * _Nonnull)rebasedWithParentRectangle:(DOTRectangleDouble * _Nonnull)parentRectangle SWIFT_WARN_UNUSED_RESULT;
- (DOTRectangleDouble * _Nonnull)mirrored SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DOTRectangleDouble * _Nonnull fullRectangle;)
+ (DOTRectangleDouble * _Nonnull)fullRectangle SWIFT_WARN_UNUSED_RESULT;
+ (DOTRectangleDouble * _Nonnull)fromCgRect:(CGRect)cgRect SWIFT_WARN_UNUSED_RESULT;
@end




/// Validate if a value belongs to an interval.
SWIFT_CLASS_NAMED("ValidationDouble")
@interface DOTValidationDouble : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (BOOL)validateWithValue:(double)value interval:(DOTIntervalDouble * _Nonnull)interval error:(NSError * _Nullable * _Nullable)error;
@end


/// Validate if a value belongs to an interval.
SWIFT_CLASS_NAMED("ValidationFloat")
@interface DOTValidationFloat : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (BOOL)validateWithValue:(float)value interval:(DOTIntervalFloat * _Nonnull)interval error:(NSError * _Nullable * _Nullable)error;
@end


/// Wrapped <code>Double</code> value for Objective-C support.
SWIFT_CLASS_NAMED("WrappedDouble")
@interface DOTWrappedDouble : NSObject
@property (nonatomic, readonly) double value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithValue:(double)value OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Wrapped <code>Float</code> value for Objective-C support.
SWIFT_CLASS_NAMED("WrappedFloat")
@interface DOTWrappedFloat : NSObject
@property (nonatomic, readonly) float value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithValue:(float)value OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
